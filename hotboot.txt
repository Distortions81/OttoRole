
#HOTBOOT (always low ram v2)
Decouple discord code from processing code with a queue (possibly fixed-size prealloc pointers)

1: Reboot event (signal from compile script, delete after detected)
2: Start new server with -hotboot, once connected child replies (ready).
Child does not load DB. It will only process guilds it has in hotboot mode (no auto-create we should do this on new_intergation anyway)

3: lock one guild, send to child, delete/unlock guild (defer?), repeat for all guilds with sleeps. May need to trigger GC every X guilds.
if incoming request goes to a nil guild, forward to child (directly into queue)

4: once all guilds transfered, parent can disconnect from discord and tell child goodbye.
5: on goodbye, child exits hotboot mode.

Probably transfer with glob or db format.
Need starting identifyier for guild data / forwarded requests
This could be done over stdio or TCP.



#SHARD MODEL
list-server, databases and children(shard)

databases: simply record data sent to it, can send guild data back when requested.
children boot, ask list-server for list of databases or use cached list if no response.
children connect to databases and distribute requests among them as possible to get data they need to serve requests.
once loaded, children send new data to all databases in the list and keep track of which ones have not verified they have recently sent data. children will keep trying to send data to databases until marked clean or database marked dead.

child hotboot: grandchild boots, ignores any requests it does not know about -hotboot
grandchild gets list of all data from child, once complete child dies leaving grandchild, grandchild exits hotboot mode.
child shutdown: tell list server we will be offline, and to change shard count.
other children can change their shard count, and request data from databases if a requst comes in (non caching???)